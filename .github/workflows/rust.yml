name: CI

on:
  push:
    branches: [ master ]
    tags:
      - v[0-9]+\.[0-9]+\.[0-9]+
  pull_request:
    branches: [ master ]


env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: clippy
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ci
    - name: Annotate commit with clippy warnings
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all-features --all
    - name: Security audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
  
  license_check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ci
    - name: License check
      run: |
        cargo install cargo-lichking
        cargo lichking check --all

  build_test_deploy:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ci
    - uses: ericcornelissen/git-tag-annotation-action@v2
      id: tag_data
    - name: Patch version for pre-release
      id: githash
      # if: github.event_name != 'pull_request'
      run: |
        echo "GSN2X_VERSION=${GITHUB_SHA::6}" >> $GITHUB_OUTPUT
    - name: Build
      run: cargo build --verbose
    - name: Test
      run: cargo test --verbose
    - name: Release build
      env:
        GSN2X_VERSION: ${{ steps.githash.outputs.GSN2X_VERSION }}
      run: cargo build --release --verbose
    - name: Strip binaries
      if: hashFiles('target/release/gsn2x')
      run: |
        strip target/release/gsn2x
        cp target/release/gsn2x gsn2x-${{ runner.os }}
    - name: Strip binaries (Windows)
      if: hashFiles('target/release/gsn2x.exe')
      run: |
        strip target/release/gsn2x.exe
        copy target/release/gsn2x.exe gsn2x-${{ runner.os }}.exe
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: gsn2x
        path: gsn2x-${{ runner.os }}*

  pre_release:
    needs: build_test_deploy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: gsn2x
    - name: Deploy pre-release to github.com
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest-build"
        prerelease: true
        title: "Latest build on commit"
        files: |
          gsn2x-*
 
  release:
    needs: build_test_deploy
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}

    steps:
    - uses: actions/checkout@v3
    - uses: ericcornelissen/git-tag-annotation-action@v2
      id: tag_data
    - name: Get the version
      id: get_version
      run: echo "name=VERSION::${GITHUB_REF/refs\/tags\//}" > $GITHUB_OUTPUT
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: gsn2x
    - name: Deploy release to github.com
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: ${{ steps.get_version.outputs.VERSION }}
        prerelease: false
        title: ${{ steps.get_version.outputs.VERSION }}
        files: |
          gsn2x-*

  coverage:
    needs: build_test_deploy
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: llvm-tools-preview
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: ci
    - name: Coverage measurement
      continue-on-error: true
      run: |
         mkdir coverage
         cargo install cargo-llvm-cov
         cargo llvm-cov --tests --lcov --output-path=coverage/coverage.lcov
    - name: Upload to codecov
      uses: codecov/codecov-action@v2
      with:
        directory: coverage


